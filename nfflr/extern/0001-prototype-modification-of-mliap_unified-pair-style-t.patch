From 3b02c6a22ba25501db52c2b323cc1ec84fc1e141 Mon Sep 17 00:00:00 2001
From: Brian DeCost <brian.decost@nist.gov>
Date: Thu, 23 May 2024 09:53:51 -0400
Subject: [PATCH] prototype modification of mliap_unified pair style to support
 GNNs (with communication limiting applicability to systems without spatial
 decomposition for now)

---
 lib/python/Makefile.lammps          | 25 +++++++++++++++++--------
 lib/python/Makefile.mliap_python    |  2 +-
 python/lammps/mliap/__init__.py     |  1 +
 src/ML-IAP/mliap_data.cpp           | 17 ++++++++++++++---
 src/ML-IAP/mliap_data.h             |  2 ++
 src/ML-IAP/mliap_unified_couple.pyx | 18 ++++++++++++++++--
 6 files changed, 51 insertions(+), 14 deletions(-)

diff --git a/lib/python/Makefile.lammps b/lib/python/Makefile.lammps
index bfde590a39..29cbd5c8f9 100644
--- a/lib/python/Makefile.lammps
+++ b/lib/python/Makefile.lammps
@@ -1,14 +1,23 @@
 # Settings that the LAMMPS build will import when this package library is used
 # See the README file for more explanation
-ifeq ($(shell type python3 >/dev/null 2>&1; echo $$?), 0)
-PYTHON=python3
-PYTHONCONFIG = python3-config
-else
-PYTHONCONFIG = python-config
+# ifeq ($(shell type python3 >/dev/null 2>&1; echo $$?), 0)
+# PYTHON=python3
+# PYTHONCONFIG = python3-config
+# else
+# PYTHONCONFIG = python-config
+# PYTHON=python
+# endif
 PYTHON=python
-endif


-python_SYSINC = $(shell which $(PYTHONCONFIG) > /dev/null 2>&1 && $(PYTHONCONFIG) --includes || :)
-python_SYSLIB = $(shell which $(PYTHONCONFIG) > /dev/null 2>&1 && $(PYTHONCONFIG) --ldflags --embed > /dev/null 2>&1 && $(PYTHONCONFIG) --ldflags --embed || (which $(PYTHONCONFIG) > /dev/null 2>&1 && $(PYTHONCONFIG) --ldflags || :) )
+# pyenv has issues with python-config - workaround
+python_SYSINC=-I$(shell python -c "import sysconfig; print(sysconfig.get_paths()['include'])")
+
+# linker flags: SHLIBS, BLDLIBRARY = "-L. -lpython3.10"
+# sysconfig.get_config_vars()["SHLIBS"]
+python_SYSLIB = -lpython$(shell python -c "import sysconfig; print(sysconfig.get_config_vars()['py_version_short'])")
+python_SYSLIB += $(shell python -c "import sysconfig; print(sysconfig.get_config_vars()['SHLIBS'])")
+
+# python_SYSINC = $(shell which $(PYTHONCONFIG) > /dev/null 2>&1 && $(PYTHONCONFIG) --includes || :)
+# python_SYSLIB = $(shell which $(PYTHONCONFIG) > /dev/null 2>&1 && $(PYTHONCONFIG) --ldflags --embed > /dev/null 2>&1 && $(PYTHONCONFIG) --ldflags --embed || (which $(PYTHONCONFIG) > /dev/null 2>&1 && $(PYTHONCONFIG) --ldflags || :) )
 python_SYSPATH =
diff --git a/lib/python/Makefile.mliap_python b/lib/python/Makefile.mliap_python
index 00483a4a6a..e2af95a812 100644
--- a/lib/python/Makefile.mliap_python
+++ b/lib/python/Makefile.mliap_python
@@ -1,3 +1,3 @@

 ../mliap_model_python_couple.cpp: ../mliap_model_python_couple.pyx
-	cythonize -3 ../mliap_model_python_couple.cpp
+	python -m cythonize -3 ../mliap_model_python_couple.cpp
diff --git a/python/lammps/mliap/__init__.py b/python/lammps/mliap/__init__.py
index dc9e2853e6..e9890632d5 100644
--- a/python/lammps/mliap/__init__.py
+++ b/python/lammps/mliap/__init__.py
@@ -23,6 +23,7 @@ else:

 try:
     pylib = ctypes.CDLL(library)
+    pylib.Py_Initialize()
 except Exception as e:
     raise OSError("Unable to locate python shared library") from e

diff --git a/src/ML-IAP/mliap_data.cpp b/src/ML-IAP/mliap_data.cpp
index 5d847ee25e..813abc138c 100644
--- a/src/ML-IAP/mliap_data.cpp
+++ b/src/ML-IAP/mliap_data.cpp
@@ -24,6 +24,7 @@
 #include "mliap_model.h"
 #include "neigh_list.h"

+
 using namespace LAMMPS_NS;

 MLIAPData::MLIAPData(LAMMPS *lmp, int gradgradflag_in, int *map_in, class MLIAPModel *model_in,
@@ -31,8 +32,8 @@ MLIAPData::MLIAPData(LAMMPS *lmp, int gradgradflag_in, int *map_in, class MLIAPM
     Pointers(lmp),
     f(nullptr), gradforce(nullptr), betas(nullptr), descriptors(nullptr), eatoms(nullptr),
     gamma(nullptr), gamma_row_index(nullptr), gamma_col_index(nullptr), egradient(nullptr),
-    numneighs(nullptr), iatoms(nullptr), ielems(nullptr), itypes(nullptr), pair_i(nullptr),
-    jatoms(nullptr), jelems(nullptr), elems(nullptr), lmp_firstneigh(nullptr), rij(nullptr),
+    numneighs(nullptr), iatoms(nullptr), itags(nullptr), ielems(nullptr), itypes(nullptr), pair_i(nullptr),
+    jatoms(nullptr), jtags(nullptr), jelems(nullptr), elems(nullptr), lmp_firstneigh(nullptr), rij(nullptr),
     graddesc(nullptr), model(nullptr), descriptor(nullptr), list(nullptr)
 {
   gradgradflag = gradgradflag_in;
@@ -82,11 +83,13 @@ MLIAPData::~MLIAPData()
   memory->destroy(gradforce);

   memory->destroy(iatoms);
+  memory->destroy(itags);
   memory->destroy(pair_i);
   memory->destroy(ielems);
   memory->destroy(itypes);
   memory->destroy(numneighs);
   memory->destroy(jatoms);
+  memory->destroy(jtags);
   memory->destroy(lmp_firstneigh);
   memory->destroy(jelems);
   memory->destroy(elems);
@@ -111,6 +114,7 @@ void MLIAPData::generate_neighdata(NeighList *list_in, int eflag_in, int vflag_i
   f = atom->f;
   double **x = atom->x;
   int *type = atom->type;
+  tagint *tag = atom->tag;

   int *ilist = list->ilist;
   int *numneigh = list->numneigh;
@@ -164,11 +168,11 @@ void MLIAPData::generate_neighdata(NeighList *list_in, int eflag_in, int vflag_i
   int ij = 0;
   for (int ii = 0; ii < natomneigh; ii++) {
     const int i = ilist[ii];
-
     const double xtmp = x[i][0];
     const double ytmp = x[i][1];
     const double ztmp = x[i][2];
     const int itype = type[i];
+    const tagint itag = tag[i];
     const int ielem = map[itype];

     int *jlist = firstneigh[i];
@@ -183,12 +187,14 @@ void MLIAPData::generate_neighdata(NeighList *list_in, int eflag_in, int vflag_i
       const double delz = x[j][2] - ztmp;
       const double rsq = delx * delx + dely * dely + delz * delz;
       int jtype = type[j];
+      tagint jtag = tag[j];
       const int jelem = map[jtype];

       lmp_firstneigh[ii][jj] = firstneigh[i][jj];
       if (rsq < descriptor->cutsq[ielem][jelem]) {
         pair_i[ij] = i;
         jatoms[ij] = j;
+	jtags[ij] = jtag;
         jelems[ij] = jelem;
         rij[ij][0] = delx;
         rij[ij][1] = dely;
@@ -200,6 +206,7 @@ void MLIAPData::generate_neighdata(NeighList *list_in, int eflag_in, int vflag_i
     iatoms[ii] = i;
     ielems[ii] = ielem;
     itypes[ii] = itype;
+    itags[ii] = itag;
     numneighs[ii] = ninside;
     npairs += ninside;
   }
@@ -225,6 +232,7 @@ void MLIAPData::grow_neigharrays()
   if (list->ghost == 1) natomneigh += list->gnum;
   if (natomneigh_max < natomneigh) {
     memory->grow(iatoms, natomneigh, "MLIAPData:iatoms");
+    memory->grow(itags, natomneigh, "MLIAPData:itags");
     memory->grow(ielems, natomneigh, "MLIAPData:ielems");
     memory->grow(itypes, natomneigh, "MLIAPData:itypes");
     memory->grow(numneighs, natomneigh, "MLIAPData:numneighs");
@@ -272,6 +280,7 @@ void MLIAPData::grow_neigharrays()
     memory->grow(jatoms, nneigh, "MLIAPData:jatoms");
     memory->grow(lmp_firstneigh, natomneigh, nneigh, "MLIAPData:lmp_firstneigh");
     memory->grow(jelems, nneigh, "MLIAPData:jelems");
+    memory->grow(jtags, nneigh, "MLIAPData:jtags");
     memory->grow(rij, nneigh, 3, "MLIAPData:rij");
     if (gradgradflag == 0) memory->grow(graddesc, nneigh, ndescriptors, 3, "MLIAPData:graddesc");
     nneigh_max = nneigh;
@@ -297,12 +306,14 @@ double MLIAPData::memory_usage()
   bytes += (double) nlistatoms * sizeof(double);                // eatoms

   bytes += (double) natomneigh_max * sizeof(int);    // iatoms
+  bytes += (double) natomneigh_max * sizeof(int);    // itags
   bytes += (double) natomneigh_max * sizeof(int);    // ielems
   bytes += (double) natomneigh_max * sizeof(int);    // itypes
   bytes += (double) natomneigh_max * sizeof(int);    // numneighs

   bytes += (double) nneigh_max * sizeof(int);                     // pair_i
   bytes += (double) nneigh_max * sizeof(int);                     // jatoms
+  bytes += (double) nneigh_max * sizeof(int);                     // jtags
   bytes += (double) nneigh_max * sizeof(int);                     // jelems
   bytes += (double) nneigh_max * natomneigh_max * sizeof(int);    // lmp_firstneigh
   bytes += (double) nneigh_max * 3 * sizeof(double);              // rij"
diff --git a/src/ML-IAP/mliap_data.h b/src/ML-IAP/mliap_data.h
index 3c27040bb8..bd0f42f3a1 100644
--- a/src/ML-IAP/mliap_data.h
+++ b/src/ML-IAP/mliap_data.h
@@ -66,12 +66,14 @@ class MLIAPData : protected Pointers {
   int natomneigh_max;            // allocated size of atom neighbor arrays
   int *numneighs;                // neighbors count for each atom
   int *iatoms;                   // index of each atom
+  tagint *itags;                    // global atom id of each atom
   int *ielems;                   // element of each atom
   int *itypes;                   // LAMMPS type of each atom for external evaluators
   int nneigh_max;                // number of ij neighbors allocated
   int npairs;                    // number of ij neighbor pairs
   int *pair_i;                   // index of each i atom for each ij pair
   int *jatoms;                   // index of each neighbor
+  tagint *jtags;                    // global atom id of each neighbor
   int *jelems;                   // element of each neighbor
   int *elems;                    // element of each atom in or not in the neighborlist
   int **lmp_firstneigh;          // copy of list->firstneigh for external evaluators
diff --git a/src/ML-IAP/mliap_unified_couple.pyx b/src/ML-IAP/mliap_unified_couple.pyx
index 6c8331d0fa..de35a0a4c0 100644
--- a/src/ML-IAP/mliap_unified_couple.pyx
+++ b/src/ML-IAP/mliap_unified_couple.pyx
@@ -59,11 +59,13 @@ cdef extern from "mliap_data.h" namespace "LAMMPS_NS":
         int natomneigh          # current number of atoms and ghosts in atom neighbor arrays
         int * numneighs         # neighbors count for each atom
         int * iatoms            # index of each atom
+        int * itags             # global ID of atom i
         int * pair_i            # index of each i atom for each ij pair
         int * ielems            # element of each atom
         int nneigh_max          # number of ij neighbors allocated
         int npairs              # number of ij neighbor pairs
         int * jatoms            # index of each neighbor
+        int * jtags             # global ID of neighbor j
         int * jelems            # element of each neighbor
         int * elems             # element of each atom in or not in the neighborlist
         double ** rij           # distance vector of each neighbor
@@ -255,6 +257,12 @@ cdef class MLIAPDataPy:
             return None
         return np.asarray(<int[:self.natomneigh]> &self.data.ielems[0])

+    @property
+    def itags(self):
+        if self.data.itags is NULL:
+            return None
+        return np.asarray(<int[:self.natomneigh]> &self.data.itags[0])
+
     @property
     def npairs(self):
         return self.data.npairs
@@ -281,6 +289,12 @@ cdef class MLIAPDataPy:
             return None
         return np.asarray(<int[:self.npairs]> &self.data.jelems[0])

+    @property
+    def jtags(self):
+        if self.data.jtags is NULL:
+            return None
+        return np.asarray(<int[:self.npairs]> &self.data.jtags[0])
+
     @property
     def rij(self):
         if self.data.rij is NULL:
@@ -405,9 +419,9 @@ cdef public object mliap_unified_connect(char *fname, MLIAPDummyModel * model,
             raise MemoryError("failed to allocate memory for element names")
         memcpy(c_str, s, slen)
         c_str[slen] = 0
-
+
         elements[i] = c_str
-
+
     unified_int.descriptor.set_elements(elements, nelements)
     unified_int.model.nelements = nelements

--
2.39.3 (Apple Git-146)
